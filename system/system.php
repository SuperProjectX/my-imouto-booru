<?php
class System {
  /**
   * Models (stdClass)
   *
   * Stores info for models:
   * - Before/after/validation callbacks
   * - Model's corresponding table in the database
   *
   * What it looks like:
   * System::$models['post'] = array(
   *   'table' => 'posts',                      //table name in database
   *   'before_save' => array(                  // callbacks
   *     'check_post',
   *     'check_tags'
   *   ),
   *   'assocs' => array(                       //associations
   *     $assoc_property_on_model = array(
   *       'type' => 'has_one',
   *       'params' => array(
   *         'class_name' => $string          // the class of the association
   *       )
   *     )
   *   )
   * );
   */
  static $models = array();
  
  /**
   * List of models in application.
   *
   * This variable, generated by scanning models in /sysadmin, will
   * be filled by the models found in the application and will be used
   * to autoload them in load_files(), also to check if a model exists.
   */
  static $model_list = array();
  
  /**
   * Temporal data
   *
   * Models will declare associations and callbacks when their file is loaded
   * throught the has_one(), before_save(), (and so on) functions.
   * Those functions will store here the data that will be used after
   * loading the model. Keeping temporally the data is needed because we can't
   * know the name of the model before loading it!
   */
  static $assocs_temp = array();
  static $callbacks_temp = array();
  static $validations_temp = array();
  
  /**
   * List of helpers in the application.
   */
  static $helpers = array();
  
  /**
   * List of controllers.
   */
  static $controllers = array();
  
  // static $has_many = array();
  
  /**
   * Stores the Models filenames (not class names) to avoid loading the same Model twice.
   * Generated by include_model();
   */
  static $loaded_models = array();
  
  /**
   * Information on the database tables.
   * $database_tables[$table_name] = array($column_name => $column_type);
   * Generated by /admin/gen_table_data.php, stored in /data/database_tables.php.
   */
  static $database_tables = array();
  
  /**
   * Load Files
   *
   * Loads models, controllers and helpers.
   */
  static function load_files() {
    require SYSROOT . 'data/app_controllers.php';
    require SYSROOT . 'classes/application.php';
    require SYSROOT . 'classes/application_models.php';
    require SYSROOT . 'classes/record_errors.php';
    require SYSROOT . 'classes/cookies.php';
    
    Application::load_files();
    
    foreach (SYSCONFIG::$autoload_models as $model)
      Application::$models->$model->load();
    
    if (SYSCONFIG::system_error_reporting)
      set_error_handler('system_error_reporting');
    
    self::$models = array2obj(self::$models);
  }
  
  # models[classname][assocs][user] = array()
  private static function register_assocs($class_name) {
    if (!self::$assocs_temp)
      return;
    
    foreach (self::$assocs_temp as $atype => $ds) {
      foreach ($ds as $d) {
        if (count($d) == 1 )
          self::$models[$class_name]['assocs'][strtolower($d[0])] = array(
            'assoc_type' => $atype,
            'params' => array(
              'class_name' => str_replace(' ', '', ucwords(str_replace('_', ' ', ($d[0]))))
            )
          );
        else
          self::$models[$class_name]['assocs'][$d[0]] = array('assoc_type' => $atype, 'params' => $d[1]);
      }
    }
    self::$assocs_temp = array();
  }
  
  /**
   * Register callback functions to model.
   *
   * Called by ActiveRecord.
   *
   * @param string $model Model name to add the functions to.
   * @param string $cb_name Callback name.
   * @param string $cb_funcs Comma-separated list of functions.
   */
  private static function register_callbacks($model_name) {
    if (empty(self::$callbacks_temp))
      return;
    
    foreach (self::$callbacks_temp as $cb_name => $cb) {
      foreach ($cb as $cb_funcs) {
        $cb_funcs = explode(',', str_replace(' ', '', $cb_funcs));
        
        $model = &static::$models[$model_name];
        
        if (!empty($model[$cb_name])) {
          $new_funcs = array_diff($cb_funcs, $model[$cb_name]);
          $cb_funcs = array_unique(array_merge($model[$cb_name], $new_funcs));
        }
        
        $model[$cb_name] = $cb_funcs;
      }
    }
    self::$callbacks_temp = array();
  }
  
  /**
   * Adds validations to temporary variable
   *
   */
  static function validations_temp($data, $validations = null) {
    if (!$validations)
      self::$validations_temp = array_merge(self::$validations_temp, $data);
    else
      self::$validations_temp = array_merge(self::$validations_temp, array($data => $validations));
  }
  
  static function controller_exists() {
    foreach (self::$controllers as $k => $v) {
      if (!is_int($k) && Request::$controller == $k) {
        Request::$controller = $v;
        return true;
      } elseif (is_int($k) && Request::$controller == $v)
        return true;
    }
    
    return ActionController::rescue_request();
  }
  
  static function get_model_table($model) {
    return self::$models->$model->table;
  }
  
  static function get_model_assocs($model) {
    return self::$models->$model->assocs;
  }
  
  static function get_model_table_filename($model_name) {
    return SYSROOT . 'database/tables/' . $model_name . '.php';
  }
}
?>